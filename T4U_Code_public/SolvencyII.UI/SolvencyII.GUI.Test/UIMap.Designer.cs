// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 12.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace SolvencyII.GUI.Test
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public partial class UIMap
    {
        
        /// <summary>
        /// AcceptTerms - Use 'AcceptTermsParams' to pass parameters into this method.
        /// </summary>
        public void AcceptTerms()
        {
            #region Variable Declarations
            WinTitleBar uITermsandConditionsTitleBar = this.UITermsandConditionsWindow.UITermsandConditionsTitleBar;
            WinCheckBox uIIhavereadandIagreewiCheckBox = this.UITermsandConditionsWindow.UIIhavereadandIagreewiWindow.UIIhavereadandIagreewiCheckBox;
            WinButton uIAcceptButton = this.UITermsandConditionsWindow.UIAcceptWindow.UIAcceptButton;
            #endregion

            // Click 'Terms and Conditions' title bar
            Mouse.Click(uITermsandConditionsTitleBar, new Point(267, 7));

            // Select 'I have read and I agree with the above terms and c...' check box
            uIIhavereadandIagreewiCheckBox.Checked = this.AcceptTermsParams.UIIhavereadandIagreewiCheckBoxChecked;

            // Click 'Accept' button
            Mouse.Click(uIAcceptButton, new Point(105, 16));
        }
        
        /// <summary>
        /// CloseWhatsNew
        /// </summary>
        public void CloseWhatsNew()
        {
            #region Variable Declarations
            WinTitleBar uIWhatsNewTitleBar = this.UIWhatsNewWindow.UIWhatsNewTitleBar;
            WinButton uICloseButton = this.UIWhatsNewWindow.UIWhatsNewTitleBar.UICloseButton;
            #endregion

            // Click 'What's New' title bar
            Mouse.Click(uIWhatsNewTitleBar, new Point(345, 20));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(22, 15));
        }
        
        /// <summary>
        /// CreateMultiReportContainer - Use 'CreateMultiReportContainerParams' to pass parameters into this method.
        /// </summary>
        public void CreateMultiReportContainer()
        {
            #region Variable Declarations
            WinMenuItem uISolvencyIIMenuItem = this.UIDThangarajanTestApp1Window2.UIMenuStrip1MenuBar.UIMultireportcontainerMenuItem.UICreateanewmultireporMenuItem.UISolvencyIIMenuItem;
            WinComboBox uIFilenameComboBox = this.UICreateSolvencyIImultWindow.UIDetailsPanePane.UIFilenameComboBox;
            WinButton uISaveButton = this.UICreateSolvencyIImultWindow.UISaveWindow.UISaveButton;
            #endregion

            // Click 'File' -> 'Create a new multi-report container' -> 'Solvency II' menu item
            Mouse.Click(uISolvencyIIMenuItem, new Point(56, 11));

            // Select 'TestCase1' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.CreateMultiReportContainerParams.UIFilenameComboBoxEditableItem;

            // Click '&Save' button
            Mouse.Click(uISaveButton, new Point(51, 16));
        }
        
        /// <summary>
        /// CreateReport - Use 'CreateReportParams' to pass parameters into this method.
        /// </summary>
        public void CreateReport()
        {
            #region Variable Declarations
            WinMenuItem uICreateanewreportMenuItem = this.UIDThangarajanTestApp1Window2.UIMenuStrip1MenuBar.UIReportMenuItem.UICreateanewreportMenuItem;
            WinEdit uITxtReportNameEdit = this.UIAddanewreportWindow.UITxtReportNameWindow.UITxtReportNameEdit;
            WinComboBox uIDateComboBox = this.UIAddanewreportWindow.UICboModelWindow.UIDateComboBox;
            WinDateTimePicker uIDtPeriodDateTimePicker = this.UIAddanewreportWindow.UIDtPeriodWindow.UIDtPeriodDateTimePicker;
            WinEdit uITxtEntityIDEdit = this.UIAddanewreportWindow.UITxtEntityIDWindow.UITxtEntityIDEdit;
            WinEdit uITxtNameEdit = this.UIAddanewreportWindow.UITxtNameWindow.UITxtNameEdit;
            WinButton uICreateanewreportButton = this.UIAddanewreportWindow.UICreateanewreportWindow.UICreateanewreportButton;
            #endregion

            // Click 'Report' -> 'Create a new report' menu item
            Mouse.Click(uICreateanewreportMenuItem, new Point(47, 9));

            // Type 'Report1' in 'txtReportName' text box
            uITxtReportNameEdit.Text = this.CreateReportParams.UITxtReportNameEditText;

            // Type '{Tab}' in 'txtReportName' text box
            Keyboard.SendKeys(uITxtReportNameEdit, this.CreateReportParams.UITxtReportNameEditSendKeys, ModifierKeys.None);

            // Type '{Tab}' in 'Date' combo box
            Keyboard.SendKeys(uIDateComboBox, this.CreateReportParams.UIDateComboBoxSendKeys, ModifierKeys.None);

            // Type '{Tab}' in 'dtPeriod' date time picker
            Keyboard.SendKeys(uIDtPeriodDateTimePicker, this.CreateReportParams.UIDtPeriodDateTimePickerSendKeys, ModifierKeys.None);

            // Type 'Report1' in 'txtEntityID' text box
            uITxtEntityIDEdit.Text = this.CreateReportParams.UITxtEntityIDEditText;

            // Type 'Report1' in 'txtName' text box
            uITxtNameEdit.Text = this.CreateReportParams.UITxtNameEditText;

            // Click 'Create a new report' button
            Mouse.Click(uICreateanewreportButton, new Point(35, 14));
        }
        
        /// <summary>
        /// Exit
        /// </summary>
        public void Exit()
        {
            #region Variable Declarations
            WinTitleBar uIDThangarajanTestApp1TitleBar = this.UIDThangarajanTestApp1Window.UIDThangarajanTestApp1TitleBar;
            WinButton uICloseButton = this.UIDThangarajanTestApp1Window.UIDThangarajanTestApp1TitleBar.UICloseButton;
            #endregion

            // Click 'Tools for Undertakings' title bar
            Mouse.Click(uIDThangarajanTestApp1TitleBar, new Point(872, 7));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(40, 3));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(24, 0));
        }
        
        /// <summary>
        /// IfNoExistingFiles
        /// </summary>
        public void IfNoExistingFiles()
        {
            #region Variable Declarations
            WinTitleBar uISolvencyIITitleBar = this.UISolvencyIIWindow.UISolvencyIITitleBar;
            WinTitleBar uINoactivemultireportcTitleBar = this.UINoactivemultireportcWindow.UINoactivemultireportcTitleBar;
            WinButton uIOKButton = this.UINoactivemultireportcWindow.UIOKWindow.UIOKButton;
            #endregion

            // Click 'Solvency II' title bar
            Mouse.Click(uISolvencyIITitleBar, new Point(877, 12));

            // Click 'No active multi report container.' title bar
            Mouse.Click(uINoactivemultireportcTitleBar, new Point(226, 11));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(25, 10));
        }
        
        /// <summary>
        /// InvokeRunPrompt - Use 'InvokeRunPromptParams' to pass parameters into this method.
        /// </summary>
        public void InvokeRunPrompt()
        {

            // Press keyboard shortcut keys 'Windows + r'
            Keyboard.SendKeys(this.InvokeRunPromptParams.SendKeys, ModifierKeys.Windows);
        }
        
        /// <summary>
        /// OverwriteFile
        /// </summary>
        public void OverwriteFile()
        {
            #region Variable Declarations
            WinButton uISaveButton = this.UICreateSolvencyIImultWindow.UISaveWindow.UISaveButton;
            WinButton uIYesButton = this.UIConfirmSaveAsWindow.UIConfirmSaveAsPane.UIYesButton;
            #endregion

            // Click '&Save' button
            Mouse.Click(uISaveButton, new Point(29, 8));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(31, 17));
        }
        
        /// <summary>
        /// ImportXBRLInstance - Use 'ImportXBRLInstanceParams' to pass parameters into this method.
        /// </summary>
        public void ImportXBRLInstance()
        {
            #region Variable Declarations
            WinMenuItem uIXBRLMenuItem = this.UIDThangarajanTestApp1Window2.UIMenuStrip1MenuBar.UIXBRLMenuItem;
            WinTitleBar uICUsersnagareththDocuTitleBar = this.UIDThangarajanTestApp1Window2.UICUsersnagareththDocuTitleBar;
            WinMenuItem uIImportusingArellewitMenuItem = this.UIDThangarajanTestApp1Window2.UIMenuStrip1MenuBar.UIXBRLMenuItem.UIImportXBRLinstancefiMenuItem.UIImportusingArellewitMenuItem;
            WinMenuItem uINativeimportMenuItem = this.UIDThangarajanTestApp1Window2.UIMenuStrip1MenuBar.UIXBRLMenuItem.UIImportXBRLinstancefiMenuItem1.UINativeimportMenuItem;
            WinEdit uINameEdit = this.UILocateXBRLfiletoimpoWindow.UIItemWindow.UIQrgxbrlListItem.UINameEdit;
            WinButton uIOpenButton = this.UILocateXBRLfiletoimpoWindow.UIOpenWindow.UIOpenButton;
            WinEdit uIItemEdit = this.UINameofinstanceWindow.UIItemWindow.UIItemEdit;
            WinButton uIOKButton = this.UINameofinstanceWindow.UIOKWindow.UIOKButton;
            WinTitleBar uIArelleresultsparsingTitleBar = this.UIArelleresultsparsingWindow.UIArelleresultsparsingTitleBar;
            WinButton uIOKButton1 = this.UIArelleresultsparsingWindow.UIOKWindow.UIOKButton;
            WinTreeItem uIBasicinformationTreeItem = this.UIDThangarajanTestApp1Window2.UITreeView1Window.UIPreparatoryreportingTreeItem1.UIS010202BasicinformatTreeItem.UIBasicinformationTreeItem;
            WinTreeItem uIBalancesheetTreeItem = this.UIDThangarajanTestApp1Window2.UITreeView1Window.UIPreparatoryreportingTreeItem2.UIS020106BalancesheetTreeItem.UIBalancesheetTreeItem;
            #endregion

            // Click 'XBRL' menu item
            Mouse.Click(uIXBRLMenuItem, new Point(24, 11));

            // Click 'Tools for Undertakings' title bar
            Mouse.Click(uICUsersnagareththDocuTitleBar, new Point(375, 9));

            // Click 'XBRL' -> 'Import XBRL instance file' -> 'Import using Arelle (without validation)' menu item
            Mouse.Click(uIImportusingArellewitMenuItem, new Point(99, 9));

            // Click 'XBRL' -> 'Import XBRL instance file' -> 'Integrated' menu item
            Mouse.Click(uINativeimportMenuItem, new Point(78, 15));

            // Click 'Name' text box
            Mouse.Click(uINameEdit, new Point(38, 8));

            // Click '&Open' button
            Mouse.Click(uIOpenButton, new Point(43, 10));

            // Type 'Import1' in text box
            uIItemEdit.Text = this.ImportXBRLInstanceParams.UIItemEditText;

            // Click '&OK' button
            Mouse.Click(uIOKButton, new Point(25, 10));

            // Click 'Arelle results parsing XBRL instance into database' title bar
            Mouse.Click(uIArelleresultsparsingTitleBar, new Point(620, 3));

            // Click 'OK' button
            Mouse.Click(uIOKButton1, new Point(13, 22));

            // Click 'Preparatory reporting Groups Quarterly' -> 'S.01.02.02 Basic information' -> 'Basic information' tree item
            Mouse.Click(uIBasicinformationTreeItem, new Point(40, 11));

            // Click 'Preparatory reporting Groups Quarterly' -> 'S.02.01.06 Balance sheet' -> 'Balance sheet' tree item
            Mouse.Click(uIBalancesheetTreeItem, new Point(28, 11));
        }
        
        /// <summary>
        /// TestImportReport - Use 'TestImportReportParams' to pass parameters into this method.
        /// </summary>
        public void TestImportReport()
        {
            #region Variable Declarations
            WinMenuItem uINativeimportMenuItem = this.UIDThangarajanTestApp1Window2.UIMenuStrip1MenuBar.UIXBRLMenuItem.UIImportXBRLinstancefiMenuItem.UINativeimportMenuItem;
            WinComboBox uIFilenameComboBox = this.UILocateXBRLfiletoimpoWindow.UIItemWindow1.UIFilenameComboBox;
            WinEdit uIFilenameEdit = this.UILocateXBRLfiletoimpoWindow.UIItemWindow11.UIFilenameEdit;
            WinComboBox uIFilenameComboBox1 = this.UILocateXBRLfiletoimpoWindow.UIItemWindow2.UIFilenameComboBox;
            WinSplitButton uIOpenSplitButton = this.UILocateXBRLfiletoimpoWindow.UIOpenWindow.UIOpenSplitButton;
            WinEdit uIItemEdit = this.UINameofinstanceWindow.UIItemWindow.UIItemEdit;
            WinButton uIOKButton = this.UINameofinstanceWindow.UIOKWindow.UIOKButton;
            WinButton uIOKButton1 = this.UIArelleresultsparsingWindow.UIOKWindow.UIOKButton;
            #endregion

            // Click 'XBRL' -> 'Import XBRL instance file' -> 'Integrated' menu item
            Mouse.Click(uINativeimportMenuItem, new Point(96, 9));

            // Select 'C:' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.TestImportReportParams.UIFilenameComboBoxEditableItem;

            // Type '{Enter}' in 'File name:' text box
            Keyboard.SendKeys(uIFilenameEdit, this.TestImportReportParams.UIFilenameEditSendKeys, ModifierKeys.None);

            // Select 'D:\temp\qrg\qrg.xbrl' in 'File name:' combo box
            uIFilenameComboBox1.EditableItem = this.TestImportReportParams.UIFilenameComboBoxEditableItem1;

            // Click '&Open' split button
            Mouse.Click(uIOpenSplitButton, new Point(35, 17));

            // Type 'ImportTestCase1' in text box
            uIItemEdit.Text = this.TestImportReportParams.UIItemEditText;

            // Click '&OK' button
            Mouse.Click(uIOKButton, new Point(21, 6));

            // Click 'OK' button
            Mouse.Click(uIOKButton1, new Point(43, 9));
        }
        
        /// <summary>
        /// TestCode
        /// </summary>
        public void TestCode()
        {
            #region Variable Declarations
            WinMenuItem uISubMenuMenuItem = this.UIDThangarajanTestApp1Window2.UIMenuStrip1MenuBar.UIXBRLMenuItem.UITestLevel1MenuItem.UISubMenuMenuItem;
            #endregion

            // Click 'XBRL' -> 'Test Level1' -> 'Sub Menu' menu item
            Mouse.Click(uISubMenuMenuItem, new Point(65, 11));
        }
        
        /// <summary>
        /// TestCode2
        /// </summary>
        public void TestCode2()
        {
            #region Variable Declarations
            WinMenuItem uIValidationMenuItem = this.UIToolsforUndertakingsWindow.UIMenuStrip1MenuBar.UIValidationMenuItem;
            WinMenuItem uISubMenu2MenuItem = this.UIToolsforUndertakingsWindow1.UIMenuStrip1MenuBar.UIValidationMenuItem1.UITestLevel2MenuItem.UISubMenu2MenuItem;
            #endregion

            // Click 'Validation' menu item
            Mouse.Click(uIValidationMenuItem, new Point(32, 3));

            // Click 'Validation' -> 'Test Level2' -> 'Sub Menu2' menu item
            Mouse.Click(uISubMenu2MenuItem, new Point(60, 4));
        }
        
        /// <summary>
        /// TempCode1 - Use 'TempCode1Params' to pass parameters into this method.
        /// </summary>
        public void TempCode1()
        {
            #region Variable Declarations
            WinMenuItem uIIntegratedMenuItem = this.UIDThangarajanTestApp1Window2.UIMenuStrip1MenuBar.UIXBRLMenuItem.UIImportXBRLinstancefiMenuItem.UIIntegratedMenuItem;
            WinComboBox uIFilenameComboBox = this.UILocateXBRLfiletoimpoWindow.UIItemWindow1.UIFilenameComboBox;
            WinButton uIOpenButton = this.UILocateXBRLfiletoimpoWindow.UIOpenWindow.UIOpenButton;
            WinEdit uIItemEdit = this.UINameofinstanceWindow.UIItemWindow.UIItemEdit;
            WinButton uIOKButton = this.UINameofinstanceWindow.UIOKWindow.UIOKButton;
            WinTreeItem uIBalancesheetTreeItem = this.UIDThangarajanTestApp1Window2.UITreeView1Window.UIPreparatoryreportingTreeItem.UIS020103BalancesheetTreeItem.UIBalancesheetTreeItem;
            #endregion

            // Click 'XBRL' -> 'Import XBRL instance file' -> 'Integrated' menu item
            Mouse.Click(uIIntegratedMenuItem, new Point(67, 10));

            // Select 'C:\test3.xbrl' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.TempCode1Params.UIFilenameComboBoxEditableItem;

            // Click '&Open' button
            Mouse.Click(uIOpenButton, new Point(59, 17));

            // Type 'testcase1' in text box
            uIItemEdit.Text = this.TempCode1Params.UIItemEditText;

            // Click '&OK' button
            Mouse.Click(uIOKButton, new Point(27, 10));

            // Click 'Preparatory reporting Groups Quarterly' -> 'S.02.01.06 Balance sheet' -> 'Balance sheet' tree item
            Mouse.Click(uIBalancesheetTreeItem, new Point(18, 4));
        }
        
        /// <summary>
        /// ExportXBRLInstance - Use 'ExportXBRLInstanceParams' to pass parameters into this method.
        /// </summary>
        public void ExportXBRLInstance()
        {
            #region Variable Declarations
            WinMenuItem uIExportXBRLinstancefiMenuItem = this.UIDThangarajanTestApp1Window2.UIMenuStrip1MenuBar.UIXBRLMenuItem.UIExportXBRLinstancefiMenuItem;
            WinMenu uIExportXBRLinstancefiMenu = this.UIItemWindow.UIExportXBRLinstancefiMenu;
            WinMenuItem uIIntegratedMenuItem = this.UIDThangarajanTestApp1Window2.UIMenuStrip1MenuBar.UIXBRLMenuItem.UIExportXBRLinstancefiMenuItem.UIIntegratedMenuItem;
            WinComboBox uIFilenameComboBox = this.UICreateanewmultireporWindow.UIDetailsPanePane.UIFilenameComboBox;
            WinButton uISaveButton = this.UICreateanewmultireporWindow.UISaveWindow.UISaveButton;
            #endregion

            // Click 'XBRL' -> 'Export XBRL instance file' menu item
            Mouse.Click(uIExportXBRLinstancefiMenuItem, new Point(50, 12));

            // Click 'Export XBRL instance fileDropDown' popup menu
            Mouse.Click(uIExportXBRLinstancefiMenu, new Point(97, 1));

            // Click 'XBRL' -> 'Export XBRL instance file' -> 'Integrated' menu item
            Mouse.Click(uIIntegratedMenuItem, new Point(86, 13));

            // Select 'D:\test.xbrl' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.ExportXBRLInstanceParams.UIFilenameComboBoxEditableItem;

            // Click '&Save' button
            Mouse.Click(uISaveButton, new Point(28, 20));
        }
        
        /// <summary>
        /// TempCode2 - Use 'TempCode2Params' to pass parameters into this method.
        /// </summary>
        public void TempCode2()
        {
            #region Variable Declarations
            WinMenuItem uIIntegratedMenuItem = this.UIDThangarajanTestApp1Window2.UIMenuStrip1MenuBar.UIXBRLMenuItem.UIExportXBRLinstancefiMenuItem.UIIntegratedMenuItem;
            WinComboBox uIFilenameComboBox = this.UICreateanewmultireporWindow.UIDetailsPanePane.UIFilenameComboBox;
            WinButton uISaveButton = this.UICreateanewmultireporWindow.UISaveWindow.UISaveButton;
            WinButton uIYesButton = this.UIConfirmSaveAsWindow.UIConfirmSaveAsPane.UIYesButton;
            #endregion

            // Click 'XBRL' -> 'Export XBRL instance file' -> 'Integrated' menu item
            Mouse.Click(uIIntegratedMenuItem, new Point(52, 11));

            // Select 'D:\xbrt\temp\exporttestcase1_qrg.xbrl' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.TempCode2Params.UIFilenameComboBoxEditableItem;

            // Click '&Save' button
            Mouse.Click(uISaveButton, new Point(63, 14));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(40, 11));
        }
        
        #region Properties
        public virtual AcceptTermsParams AcceptTermsParams
        {
            get
            {
                if ((this.mAcceptTermsParams == null))
                {
                    this.mAcceptTermsParams = new AcceptTermsParams();
                }
                return this.mAcceptTermsParams;
            }
        }
        
        public virtual CreateMultiReportContainerParams CreateMultiReportContainerParams
        {
            get
            {
                if ((this.mCreateMultiReportContainerParams == null))
                {
                    this.mCreateMultiReportContainerParams = new CreateMultiReportContainerParams();
                }
                return this.mCreateMultiReportContainerParams;
            }
        }
        
        public virtual CreateReportParams CreateReportParams
        {
            get
            {
                if ((this.mCreateReportParams == null))
                {
                    this.mCreateReportParams = new CreateReportParams();
                }
                return this.mCreateReportParams;
            }
        }
        
        public virtual InvokeRunPromptParams InvokeRunPromptParams
        {
            get
            {
                if ((this.mInvokeRunPromptParams == null))
                {
                    this.mInvokeRunPromptParams = new InvokeRunPromptParams();
                }
                return this.mInvokeRunPromptParams;
            }
        }
        
        public virtual ImportXBRLInstanceParams ImportXBRLInstanceParams
        {
            get
            {
                if ((this.mImportXBRLInstanceParams == null))
                {
                    this.mImportXBRLInstanceParams = new ImportXBRLInstanceParams();
                }
                return this.mImportXBRLInstanceParams;
            }
        }
        
        public virtual TestImportReportParams TestImportReportParams
        {
            get
            {
                if ((this.mTestImportReportParams == null))
                {
                    this.mTestImportReportParams = new TestImportReportParams();
                }
                return this.mTestImportReportParams;
            }
        }
        
        public virtual TempCode1Params TempCode1Params
        {
            get
            {
                if ((this.mTempCode1Params == null))
                {
                    this.mTempCode1Params = new TempCode1Params();
                }
                return this.mTempCode1Params;
            }
        }
        
        public virtual ExportXBRLInstanceParams ExportXBRLInstanceParams
        {
            get
            {
                if ((this.mExportXBRLInstanceParams == null))
                {
                    this.mExportXBRLInstanceParams = new ExportXBRLInstanceParams();
                }
                return this.mExportXBRLInstanceParams;
            }
        }
        
        public virtual TempCode2Params TempCode2Params
        {
            get
            {
                if ((this.mTempCode2Params == null))
                {
                    this.mTempCode2Params = new TempCode2Params();
                }
                return this.mTempCode2Params;
            }
        }
        
        public UIRunWindow UIRunWindow
        {
            get
            {
                if ((this.mUIRunWindow == null))
                {
                    this.mUIRunWindow = new UIRunWindow();
                }
                return this.mUIRunWindow;
            }
        }
        
        public UITermsandConditionsWindow UITermsandConditionsWindow
        {
            get
            {
                if ((this.mUITermsandConditionsWindow == null))
                {
                    this.mUITermsandConditionsWindow = new UITermsandConditionsWindow();
                }
                return this.mUITermsandConditionsWindow;
            }
        }
        
        public UIDThangarajanTestApp1Window UIDThangarajanTestApp1Window
        {
            get
            {
                if ((this.mUIDThangarajanTestApp1Window == null))
                {
                    this.mUIDThangarajanTestApp1Window = new UIDThangarajanTestApp1Window();
                }
                return this.mUIDThangarajanTestApp1Window;
            }
        }
        
        public UINoactivemultireportcWindow UINoactivemultireportcWindow
        {
            get
            {
                if ((this.mUINoactivemultireportcWindow == null))
                {
                    this.mUINoactivemultireportcWindow = new UINoactivemultireportcWindow();
                }
                return this.mUINoactivemultireportcWindow;
            }
        }
        
        public UILocateSolvencyIIdataWindow UILocateSolvencyIIdataWindow
        {
            get
            {
                if ((this.mUILocateSolvencyIIdataWindow == null))
                {
                    this.mUILocateSolvencyIIdataWindow = new UILocateSolvencyIIdataWindow();
                }
                return this.mUILocateSolvencyIIdataWindow;
            }
        }
        
        public UISolvencyIIWindow UISolvencyIIWindow
        {
            get
            {
                if ((this.mUISolvencyIIWindow == null))
                {
                    this.mUISolvencyIIWindow = new UISolvencyIIWindow();
                }
                return this.mUISolvencyIIWindow;
            }
        }
        
        public UIDThangarajanTestApp1Window1 UIDThangarajanTestApp1Window1
        {
            get
            {
                if ((this.mUIDThangarajanTestApp1Window1 == null))
                {
                    this.mUIDThangarajanTestApp1Window1 = new UIDThangarajanTestApp1Window1();
                }
                return this.mUIDThangarajanTestApp1Window1;
            }
        }
        
        public UIWhatsNewWindow UIWhatsNewWindow
        {
            get
            {
                if ((this.mUIWhatsNewWindow == null))
                {
                    this.mUIWhatsNewWindow = new UIWhatsNewWindow();
                }
                return this.mUIWhatsNewWindow;
            }
        }
        
        public UIDThangarajanTestApp1Window2 UIDThangarajanTestApp1Window2
        {
            get
            {
                if ((this.mUIDThangarajanTestApp1Window2 == null))
                {
                    this.mUIDThangarajanTestApp1Window2 = new UIDThangarajanTestApp1Window2();
                }
                return this.mUIDThangarajanTestApp1Window2;
            }
        }
        
        public UICreateSolvencyIImultWindow UICreateSolvencyIImultWindow
        {
            get
            {
                if ((this.mUICreateSolvencyIImultWindow == null))
                {
                    this.mUICreateSolvencyIImultWindow = new UICreateSolvencyIImultWindow();
                }
                return this.mUICreateSolvencyIImultWindow;
            }
        }
        
        public UIAddanewreportWindow UIAddanewreportWindow
        {
            get
            {
                if ((this.mUIAddanewreportWindow == null))
                {
                    this.mUIAddanewreportWindow = new UIAddanewreportWindow();
                }
                return this.mUIAddanewreportWindow;
            }
        }
        
        public UIConfirmSaveAsWindow UIConfirmSaveAsWindow
        {
            get
            {
                if ((this.mUIConfirmSaveAsWindow == null))
                {
                    this.mUIConfirmSaveAsWindow = new UIConfirmSaveAsWindow();
                }
                return this.mUIConfirmSaveAsWindow;
            }
        }
        
        public UILocateXBRLfiletoimpoWindow UILocateXBRLfiletoimpoWindow
        {
            get
            {
                if ((this.mUILocateXBRLfiletoimpoWindow == null))
                {
                    this.mUILocateXBRLfiletoimpoWindow = new UILocateXBRLfiletoimpoWindow();
                }
                return this.mUILocateXBRLfiletoimpoWindow;
            }
        }
        
        public UINameofinstanceWindow UINameofinstanceWindow
        {
            get
            {
                if ((this.mUINameofinstanceWindow == null))
                {
                    this.mUINameofinstanceWindow = new UINameofinstanceWindow();
                }
                return this.mUINameofinstanceWindow;
            }
        }
        
        public UIArelleresultsparsingWindow UIArelleresultsparsingWindow
        {
            get
            {
                if ((this.mUIArelleresultsparsingWindow == null))
                {
                    this.mUIArelleresultsparsingWindow = new UIArelleresultsparsingWindow();
                }
                return this.mUIArelleresultsparsingWindow;
            }
        }
        
        public UIToolsforUndertakingsWindow UIToolsforUndertakingsWindow
        {
            get
            {
                if ((this.mUIToolsforUndertakingsWindow == null))
                {
                    this.mUIToolsforUndertakingsWindow = new UIToolsforUndertakingsWindow();
                }
                return this.mUIToolsforUndertakingsWindow;
            }
        }
        
        public UIToolsforUndertakingsWindow1 UIToolsforUndertakingsWindow1
        {
            get
            {
                if ((this.mUIToolsforUndertakingsWindow1 == null))
                {
                    this.mUIToolsforUndertakingsWindow1 = new UIToolsforUndertakingsWindow1();
                }
                return this.mUIToolsforUndertakingsWindow1;
            }
        }
        
        public UIItemWindow4 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow4();
                }
                return this.mUIItemWindow;
            }
        }
        
        public UICreateanewmultireporWindow UICreateanewmultireporWindow
        {
            get
            {
                if ((this.mUICreateanewmultireporWindow == null))
                {
                    this.mUICreateanewmultireporWindow = new UICreateanewmultireporWindow();
                }
                return this.mUICreateanewmultireporWindow;
            }
        }
        #endregion
        
        #region Fields
        private AcceptTermsParams mAcceptTermsParams;
        
        private CreateMultiReportContainerParams mCreateMultiReportContainerParams;
        
        private CreateReportParams mCreateReportParams;
        
        private InvokeRunPromptParams mInvokeRunPromptParams;
        
        private ImportXBRLInstanceParams mImportXBRLInstanceParams;
        
        private TestImportReportParams mTestImportReportParams;
        
        private TempCode1Params mTempCode1Params;
        
        private ExportXBRLInstanceParams mExportXBRLInstanceParams;
        
        private TempCode2Params mTempCode2Params;
        
        private UIRunWindow mUIRunWindow;
        
        private UITermsandConditionsWindow mUITermsandConditionsWindow;
        
        private UIDThangarajanTestApp1Window mUIDThangarajanTestApp1Window;
        
        private UINoactivemultireportcWindow mUINoactivemultireportcWindow;
        
        private UILocateSolvencyIIdataWindow mUILocateSolvencyIIdataWindow;
        
        private UISolvencyIIWindow mUISolvencyIIWindow;
        
        private UIDThangarajanTestApp1Window1 mUIDThangarajanTestApp1Window1;
        
        private UIWhatsNewWindow mUIWhatsNewWindow;
        
        private UIDThangarajanTestApp1Window2 mUIDThangarajanTestApp1Window2;
        
        private UICreateSolvencyIImultWindow mUICreateSolvencyIImultWindow;
        
        private UIAddanewreportWindow mUIAddanewreportWindow;
        
        private UIConfirmSaveAsWindow mUIConfirmSaveAsWindow;
        
        private UILocateXBRLfiletoimpoWindow mUILocateXBRLfiletoimpoWindow;
        
        private UINameofinstanceWindow mUINameofinstanceWindow;
        
        private UIArelleresultsparsingWindow mUIArelleresultsparsingWindow;
        
        private UIToolsforUndertakingsWindow mUIToolsforUndertakingsWindow;
        
        private UIToolsforUndertakingsWindow1 mUIToolsforUndertakingsWindow1;
        
        private UIItemWindow4 mUIItemWindow;
        
        private UICreateanewmultireporWindow mUICreateanewmultireporWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AcceptTerms'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class AcceptTermsParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'I have read and I agree with the above terms and c...' check box
        /// </summary>
        public bool UIIhavereadandIagreewiCheckBoxChecked = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CreateMultiReportContainer'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class CreateMultiReportContainerParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'TestCase1' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "TestCase1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CreateReport'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class CreateReportParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Report1' in 'txtReportName' text box
        /// </summary>
        public string UITxtReportNameEditText = "Report1";
        
        /// <summary>
        /// Type '{Tab}' in 'txtReportName' text box
        /// </summary>
        public string UITxtReportNameEditSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '{Tab}' in 'Date' combo box
        /// </summary>
        public string UIDateComboBoxSendKeys = "{Tab}";
        
        /// <summary>
        /// Type '{Tab}' in 'dtPeriod' date time picker
        /// </summary>
        public string UIDtPeriodDateTimePickerSendKeys = "{Tab}";
        
        /// <summary>
        /// Type 'Report1' in 'txtEntityID' text box
        /// </summary>
        public string UITxtEntityIDEditText = "Report1";
        
        /// <summary>
        /// Type 'Report1' in 'txtName' text box
        /// </summary>
        public string UITxtNameEditText = "Report1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'InvokeRunPrompt'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class InvokeRunPromptParams
    {
        
        #region Fields
        /// <summary>
        /// Press keyboard shortcut keys 'Windows + r'
        /// </summary>
        public string SendKeys = "r";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ImportXBRLInstance'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class ImportXBRLInstanceParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Import1' in text box
        /// </summary>
        public string UIItemEditText = "Import1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TestImportReport'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class TestImportReportParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'C:' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "C:";
        
        /// <summary>
        /// Type '{Enter}' in 'File name:' text box
        /// </summary>
        public string UIFilenameEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Select 'D:\temp\qrg\qrg.xbrl' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem1 = "D:\\temp\\qrg\\qrg.xbrl";
        
        /// <summary>
        /// Type 'ImportTestCase1' in text box
        /// </summary>
        public string UIItemEditText = "ImportTestCase1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TempCode1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class TempCode1Params
    {
        
        #region Fields
        /// <summary>
        /// Select 'C:\test3.xbrl' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "C:\\test3.xbrl";
        
        /// <summary>
        /// Type 'testcase1' in text box
        /// </summary>
        public string UIItemEditText = "testcase1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ExportXBRLInstance'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class ExportXBRLInstanceParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'D:\test.xbrl' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "D:\\test.xbrl";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'TempCode2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class TempCode2Params
    {
        
        #region Fields
        /// <summary>
        /// Select 'D:\xbrt\temp\exporttestcase1_qrg.xbrl' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "D:\\xbrt\\temp\\exporttestcase1_qrg.xbrl";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIRunWindow : WinWindow
    {
        
        public UIRunWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Run";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Run");
            #endregion
        }
        
        #region Properties
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIItemWindow1 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow1(this);
                }
                return this.mUIItemWindow1;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow mUIItemWindow;
        
        private UIItemWindow1 mUIItemWindow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "12298";
            this.WindowTitles.Add("Run");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIOpenComboBox
        {
            get
            {
                if ((this.mUIOpenComboBox == null))
                {
                    this.mUIOpenComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIOpenComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "Open:";
                    this.mUIOpenComboBox.WindowTitles.Add("Run");
                    #endregion
                }
                return this.mUIOpenComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIOpenComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1001";
            this.WindowTitles.Add("Run");
            #endregion
        }
        
        #region Properties
        public WinEdit UIOpenEdit
        {
            get
            {
                if ((this.mUIOpenEdit == null))
                {
                    this.mUIOpenEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIOpenEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Open:";
                    this.mUIOpenEdit.WindowTitles.Add("Run");
                    #endregion
                }
                return this.mUIOpenEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIOpenEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UITermsandConditionsWindow : WinWindow
    {
        
        public UITermsandConditionsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Terms and Conditions";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Terms and Conditions");
            #endregion
        }
        
        #region Properties
        public WinTitleBar UITermsandConditionsTitleBar
        {
            get
            {
                if ((this.mUITermsandConditionsTitleBar == null))
                {
                    this.mUITermsandConditionsTitleBar = new WinTitleBar(this);
                    #region Search Criteria
                    this.mUITermsandConditionsTitleBar.WindowTitles.Add("Terms and Conditions");
                    #endregion
                }
                return this.mUITermsandConditionsTitleBar;
            }
        }
        
        public UIIhavereadandIagreewiWindow UIIhavereadandIagreewiWindow
        {
            get
            {
                if ((this.mUIIhavereadandIagreewiWindow == null))
                {
                    this.mUIIhavereadandIagreewiWindow = new UIIhavereadandIagreewiWindow(this);
                }
                return this.mUIIhavereadandIagreewiWindow;
            }
        }
        
        public UIAcceptWindow UIAcceptWindow
        {
            get
            {
                if ((this.mUIAcceptWindow == null))
                {
                    this.mUIAcceptWindow = new UIAcceptWindow(this);
                }
                return this.mUIAcceptWindow;
            }
        }
        #endregion
        
        #region Fields
        private WinTitleBar mUITermsandConditionsTitleBar;
        
        private UIIhavereadandIagreewiWindow mUIIhavereadandIagreewiWindow;
        
        private UIAcceptWindow mUIAcceptWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIIhavereadandIagreewiWindow : WinWindow
    {
        
        public UIIhavereadandIagreewiWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "chkBoxAgree";
            this.WindowTitles.Add("Terms and Conditions");
            #endregion
        }
        
        #region Properties
        public WinCheckBox UIIhavereadandIagreewiCheckBox
        {
            get
            {
                if ((this.mUIIhavereadandIagreewiCheckBox == null))
                {
                    this.mUIIhavereadandIagreewiCheckBox = new WinCheckBox(this);
                    #region Search Criteria
                    this.mUIIhavereadandIagreewiCheckBox.SearchProperties[WinCheckBox.PropertyNames.Name] = "I have read and I agree with the above terms and conditions";
                    this.mUIIhavereadandIagreewiCheckBox.WindowTitles.Add("Terms and Conditions");
                    #endregion
                }
                return this.mUIIhavereadandIagreewiCheckBox;
            }
        }
        #endregion
        
        #region Fields
        private WinCheckBox mUIIhavereadandIagreewiCheckBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIAcceptWindow : WinWindow
    {
        
        public UIAcceptWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnAccept";
            this.WindowTitles.Add("Terms and Conditions");
            #endregion
        }
        
        #region Properties
        public WinButton UIAcceptButton
        {
            get
            {
                if ((this.mUIAcceptButton == null))
                {
                    this.mUIAcceptButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIAcceptButton.SearchProperties[WinButton.PropertyNames.Name] = "Accept";
                    this.mUIAcceptButton.WindowTitles.Add("Terms and Conditions");
                    #endregion
                }
                return this.mUIAcceptButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIAcceptButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIDThangarajanTestApp1Window : WinWindow
    {
        
        public UIDThangarajanTestApp1Window()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Tools for Undertakings";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Tools for Undertakings");
            #endregion
        }
        
        #region Properties
        public UIDThangarajanTestApp1TitleBar UIDThangarajanTestApp1TitleBar
        {
            get
            {
                if ((this.mUIDThangarajanTestApp1TitleBar == null))
                {
                    this.mUIDThangarajanTestApp1TitleBar = new UIDThangarajanTestApp1TitleBar(this);
                }
                return this.mUIDThangarajanTestApp1TitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UIDThangarajanTestApp1TitleBar mUIDThangarajanTestApp1TitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIDThangarajanTestApp1TitleBar : WinTitleBar
    {
        
        public UIDThangarajanTestApp1TitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Tools for Undertakings");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Tools for Undertakings");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UINoactivemultireportcWindow : WinWindow
    {
        
        public UINoactivemultireportcWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "No active multi report container.";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("No active multi report container.");
            #endregion
        }
        
        #region Properties
        public UIOKWindow UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow(this);
                }
                return this.mUIOKWindow;
            }
        }
        
        public WinTitleBar UINoactivemultireportcTitleBar
        {
            get
            {
                if ((this.mUINoactivemultireportcTitleBar == null))
                {
                    this.mUINoactivemultireportcTitleBar = new WinTitleBar(this);
                    #region Search Criteria
                    this.mUINoactivemultireportcTitleBar.WindowTitles.Add("No active multi report container.");
                    #endregion
                }
                return this.mUINoactivemultireportcTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UIOKWindow mUIOKWindow;
        
        private WinTitleBar mUINoactivemultireportcTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIOKWindow : WinWindow
    {
        
        public UIOKWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("No active multi report container.");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("No active multi report container.");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UILocateSolvencyIIdataWindow : WinWindow
    {
        
        public UILocateSolvencyIIdataWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Locate Solvency II database";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Locate Solvency II database");
            #endregion
        }
        
        #region Properties
        public UINOWindow UINOWindow
        {
            get
            {
                if ((this.mUINOWindow == null))
                {
                    this.mUINOWindow = new UINOWindow(this);
                }
                return this.mUINOWindow;
            }
        }
        #endregion
        
        #region Fields
        private UINOWindow mUINOWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UINOWindow : WinWindow
    {
        
        public UINOWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "7";
            this.WindowTitles.Add("Locate Solvency II database");
            #endregion
        }
        
        #region Properties
        public WinButton UINOButton
        {
            get
            {
                if ((this.mUINOButton == null))
                {
                    this.mUINOButton = new WinButton(this);
                    #region Search Criteria
                    this.mUINOButton.SearchProperties[WinButton.PropertyNames.Name] = "No";
                    this.mUINOButton.WindowTitles.Add("Locate Solvency II database");
                    #endregion
                }
                return this.mUINOButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUINOButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UISolvencyIIWindow : WinWindow
    {
        
        public UISolvencyIIWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Solvency II";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Solvency II");
            #endregion
        }
        
        #region Properties
        public WinTitleBar UISolvencyIITitleBar
        {
            get
            {
                if ((this.mUISolvencyIITitleBar == null))
                {
                    this.mUISolvencyIITitleBar = new WinTitleBar(this);
                    #region Search Criteria
                    this.mUISolvencyIITitleBar.WindowTitles.Add("Solvency II");
                    #endregion
                }
                return this.mUISolvencyIITitleBar;
            }
        }
        #endregion
        
        #region Fields
        private WinTitleBar mUISolvencyIITitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIDThangarajanTestApp1Window1 : WinWindow
    {
        
        public UIDThangarajanTestApp1Window1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Tools for Undertakings";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Tools for Undertakings");
            #endregion
        }
        
        #region Properties
        public WinTitleBar UIDThangarajanTestApp1TitleBar
        {
            get
            {
                if ((this.mUIDThangarajanTestApp1TitleBar == null))
                {
                    this.mUIDThangarajanTestApp1TitleBar = new WinTitleBar(this);
                    #region Search Criteria
                    this.mUIDThangarajanTestApp1TitleBar.WindowTitles.Add("Tools for Undertakings");
                    #endregion
                }
                return this.mUIDThangarajanTestApp1TitleBar;
            }
        }
        
        public UIMenuStrip1MenuBar UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new UIMenuStrip1MenuBar(this);
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        #endregion
        
        #region Fields
        private WinTitleBar mUIDThangarajanTestApp1TitleBar;
        
        private UIMenuStrip1MenuBar mUIMenuStrip1MenuBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIMenuStrip1MenuBar : WinMenuBar
    {
        
        public UIMenuStrip1MenuBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("Tools for Undertakings");
            #endregion
        }
        
        #region Properties
        public UIMultireportcontainerMenuItem UIMultireportcontainerMenuItem
        {
            get
            {
                if ((this.mUIMultireportcontainerMenuItem == null))
                {
                    this.mUIMultireportcontainerMenuItem = new UIMultireportcontainerMenuItem(this);
                }
                return this.mUIMultireportcontainerMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIMultireportcontainerMenuItem mUIMultireportcontainerMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIMultireportcontainerMenuItem : WinMenuItem
    {
        
        public UIMultireportcontainerMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("Tools for Undertakings");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIExitMenuItem
        {
            get
            {
                if ((this.mUIExitMenuItem == null))
                {
                    this.mUIExitMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIExitMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Exit";
                    this.mUIExitMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIExitMenuItem.WindowTitles.Add("Tools for Undertakings");
                    #endregion
                }
                return this.mUIExitMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIExitMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIWhatsNewWindow : WinWindow
    {
        
        public UIWhatsNewWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "What\'s New";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("What\'s New");
            #endregion
        }
        
        #region Properties
        public UIWhatsNewTitleBar UIWhatsNewTitleBar
        {
            get
            {
                if ((this.mUIWhatsNewTitleBar == null))
                {
                    this.mUIWhatsNewTitleBar = new UIWhatsNewTitleBar(this);
                }
                return this.mUIWhatsNewTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UIWhatsNewTitleBar mUIWhatsNewTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIWhatsNewTitleBar : WinTitleBar
    {
        
        public UIWhatsNewTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("What\'s New");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("What\'s New");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIDThangarajanTestApp1Window2 : WinWindow
    {
        
        public UIDThangarajanTestApp1Window2()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Tools for Undertakings";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Tools for Undertakings");
            this.WindowTitles.Add("Tools for Undertakings");
            #endregion
        }
        
        #region Properties
        public UIMenuStrip1MenuBar1 UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new UIMenuStrip1MenuBar1(this);
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        
        public WinTitleBar UICUsersnagareththDocuTitleBar
        {
            get
            {
                if ((this.mUICUsersnagareththDocuTitleBar == null))
                {
                    this.mUICUsersnagareththDocuTitleBar = new WinTitleBar(this);
                    #region Search Criteria
                    this.mUICUsersnagareththDocuTitleBar.WindowTitles.Add("Tools for Undertakings");
                    #endregion
                }
                return this.mUICUsersnagareththDocuTitleBar;
            }
        }
        
        public UITreeView1Window UITreeView1Window
        {
            get
            {
                if ((this.mUITreeView1Window == null))
                {
                    this.mUITreeView1Window = new UITreeView1Window(this);
                }
                return this.mUITreeView1Window;
            }
        }
        #endregion
        
        #region Fields
        private UIMenuStrip1MenuBar1 mUIMenuStrip1MenuBar;
        
        private WinTitleBar mUICUsersnagareththDocuTitleBar;
        
        private UITreeView1Window mUITreeView1Window;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIMenuStrip1MenuBar1 : WinMenuBar
    {
        
        public UIMenuStrip1MenuBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("Tools for Undertakings");
            this.WindowTitles.Add("Tools for Undertakings");
            #endregion
        }
        
        #region Properties
        public UIMultireportcontainerMenuItem1 UIMultireportcontainerMenuItem
        {
            get
            {
                if ((this.mUIMultireportcontainerMenuItem == null))
                {
                    this.mUIMultireportcontainerMenuItem = new UIMultireportcontainerMenuItem1(this);
                }
                return this.mUIMultireportcontainerMenuItem;
            }
        }
        
        public UIReportMenuItem UIReportMenuItem
        {
            get
            {
                if ((this.mUIReportMenuItem == null))
                {
                    this.mUIReportMenuItem = new UIReportMenuItem(this);
                }
                return this.mUIReportMenuItem;
            }
        }
        
        public UIXBRLMenuItem UIXBRLMenuItem
        {
            get
            {
                if ((this.mUIXBRLMenuItem == null))
                {
                    this.mUIXBRLMenuItem = new UIXBRLMenuItem(this);
                }
                return this.mUIXBRLMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIMultireportcontainerMenuItem1 mUIMultireportcontainerMenuItem;
        
        private UIReportMenuItem mUIReportMenuItem;
        
        private UIXBRLMenuItem mUIXBRLMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIMultireportcontainerMenuItem1 : WinMenuItem
    {
        
        public UIMultireportcontainerMenuItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("Tools for Undertakings");
            #endregion
        }
        
        #region Properties
        public UICreateanewmultireporMenuItem UICreateanewmultireporMenuItem
        {
            get
            {
                if ((this.mUICreateanewmultireporMenuItem == null))
                {
                    this.mUICreateanewmultireporMenuItem = new UICreateanewmultireporMenuItem(this);
                }
                return this.mUICreateanewmultireporMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UICreateanewmultireporMenuItem mUICreateanewmultireporMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UICreateanewmultireporMenuItem : WinMenuItem
    {
        
        public UICreateanewmultireporMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "Create a new multi-report container";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Tools for Undertakings");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UISolvencyIIMenuItem
        {
            get
            {
                if ((this.mUISolvencyIIMenuItem == null))
                {
                    this.mUISolvencyIIMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUISolvencyIIMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Solvency II";
                    this.mUISolvencyIIMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUISolvencyIIMenuItem.WindowTitles.Add("Tools for Undertakings");
                    #endregion
                }
                return this.mUISolvencyIIMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUISolvencyIIMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIReportMenuItem : WinMenuItem
    {
        
        public UIReportMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "Report";
            this.WindowTitles.Add("Tools for Undertakings");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UICreateanewreportMenuItem
        {
            get
            {
                if ((this.mUICreateanewreportMenuItem == null))
                {
                    this.mUICreateanewreportMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUICreateanewreportMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Create a new report";
                    this.mUICreateanewreportMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUICreateanewreportMenuItem.WindowTitles.Add("Tools for Undertakings");
                    #endregion
                }
                return this.mUICreateanewreportMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUICreateanewreportMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIXBRLMenuItem : WinMenuItem
    {
        
        public UIXBRLMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "XBRL";
            this.WindowTitles.Add("Tools for Undertakings");
            #endregion
        }
        
        #region Properties
        public UIImportXBRLinstancefiMenuItem UIImportXBRLinstancefiMenuItem
        {
            get
            {
                if ((this.mUIImportXBRLinstancefiMenuItem == null))
                {
                    this.mUIImportXBRLinstancefiMenuItem = new UIImportXBRLinstancefiMenuItem(this);
                }
                return this.mUIImportXBRLinstancefiMenuItem;
            }
        }
        
        public UIImportXBRLinstancefiMenuItem1 UIImportXBRLinstancefiMenuItem1
        {
            get
            {
                if ((this.mUIImportXBRLinstancefiMenuItem1 == null))
                {
                    this.mUIImportXBRLinstancefiMenuItem1 = new UIImportXBRLinstancefiMenuItem1(this);
                }
                return this.mUIImportXBRLinstancefiMenuItem1;
            }
        }
        
        public UITestLevel1MenuItem UITestLevel1MenuItem
        {
            get
            {
                if ((this.mUITestLevel1MenuItem == null))
                {
                    this.mUITestLevel1MenuItem = new UITestLevel1MenuItem(this);
                }
                return this.mUITestLevel1MenuItem;
            }
        }
        
        public UIExportXBRLinstancefiMenuItem UIExportXBRLinstancefiMenuItem
        {
            get
            {
                if ((this.mUIExportXBRLinstancefiMenuItem == null))
                {
                    this.mUIExportXBRLinstancefiMenuItem = new UIExportXBRLinstancefiMenuItem(this);
                }
                return this.mUIExportXBRLinstancefiMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIImportXBRLinstancefiMenuItem mUIImportXBRLinstancefiMenuItem;
        
        private UIImportXBRLinstancefiMenuItem1 mUIImportXBRLinstancefiMenuItem1;
        
        private UITestLevel1MenuItem mUITestLevel1MenuItem;
        
        private UIExportXBRLinstancefiMenuItem mUIExportXBRLinstancefiMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIImportXBRLinstancefiMenuItem : WinMenuItem
    {
        
        public UIImportXBRLinstancefiMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "Import XBRL instance file";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Tools for Undertakings");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIImportusingArellewitMenuItem
        {
            get
            {
                if ((this.mUIImportusingArellewitMenuItem == null))
                {
                    this.mUIImportusingArellewitMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIImportusingArellewitMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Import using Arelle (without validation)";
                    this.mUIImportusingArellewitMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIImportusingArellewitMenuItem.WindowTitles.Add("Tools for Undertakings");
                    #endregion
                }
                return this.mUIImportusingArellewitMenuItem;
            }
        }
        
        public WinMenuItem UINativeimportMenuItem
        {
            get
            {
                if ((this.mUINativeimportMenuItem == null))
                {
                    this.mUINativeimportMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUINativeimportMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Integrated";
                    this.mUINativeimportMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUINativeimportMenuItem.WindowTitles.Add("Tools for Undertakings");
                    #endregion
                }
                return this.mUINativeimportMenuItem;
            }
        }
        
        public WinMenuItem UIIntegratedMenuItem
        {
            get
            {
                if ((this.mUIIntegratedMenuItem == null))
                {
                    this.mUIIntegratedMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIIntegratedMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Integrated";
                    this.mUIIntegratedMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIIntegratedMenuItem.WindowTitles.Add("Tools for Undertakings");
                    #endregion
                }
                return this.mUIIntegratedMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIImportusingArellewitMenuItem;
        
        private WinMenuItem mUINativeimportMenuItem;
        
        private WinMenuItem mUIIntegratedMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIImportXBRLinstancefiMenuItem1 : WinMenuItem
    {
        
        public UIImportXBRLinstancefiMenuItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "Import XBRL instance file";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Tools for Undertakings");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UINativeimportMenuItem
        {
            get
            {
                if ((this.mUINativeimportMenuItem == null))
                {
                    this.mUINativeimportMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUINativeimportMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Integrated";
                    this.mUINativeimportMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUINativeimportMenuItem.WindowTitles.Add("Tools for Undertakings");
                    #endregion
                }
                return this.mUINativeimportMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUINativeimportMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UITestLevel1MenuItem : WinMenuItem
    {
        
        public UITestLevel1MenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "Test Level1";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Tools for Undertakings");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UISubMenuMenuItem
        {
            get
            {
                if ((this.mUISubMenuMenuItem == null))
                {
                    this.mUISubMenuMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUISubMenuMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Sub Menu";
                    this.mUISubMenuMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUISubMenuMenuItem.WindowTitles.Add("Tools for Undertakings");
                    #endregion
                }
                return this.mUISubMenuMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUISubMenuMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIExportXBRLinstancefiMenuItem : WinMenuItem
    {
        
        public UIExportXBRLinstancefiMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "Export XBRL instance file";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Tools for Undertakings");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIIntegratedMenuItem
        {
            get
            {
                if ((this.mUIIntegratedMenuItem == null))
                {
                    this.mUIIntegratedMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIIntegratedMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Integrated";
                    this.mUIIntegratedMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIIntegratedMenuItem.WindowTitles.Add("Tools for Undertakings");
                    #endregion
                }
                return this.mUIIntegratedMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIIntegratedMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UITreeView1Window : WinWindow
    {
        
        public UITreeView1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "treeView1";
            this.WindowTitles.Add("Tools for Undertakings");
            #endregion
        }
        
        #region Properties
        public UIPreparatoryreportingTreeItem UIPreparatoryreportingTreeItem
        {
            get
            {
                if ((this.mUIPreparatoryreportingTreeItem == null))
                {
                    this.mUIPreparatoryreportingTreeItem = new UIPreparatoryreportingTreeItem(this);
                }
                return this.mUIPreparatoryreportingTreeItem;
            }
        }
        
        public UIPreparatoryreportingTreeItem1 UIPreparatoryreportingTreeItem1
        {
            get
            {
                if ((this.mUIPreparatoryreportingTreeItem1 == null))
                {
                    this.mUIPreparatoryreportingTreeItem1 = new UIPreparatoryreportingTreeItem1(this);
                }
                return this.mUIPreparatoryreportingTreeItem1;
            }
        }
        
        public UIPreparatoryreportingTreeItem2 UIPreparatoryreportingTreeItem2
        {
            get
            {
                if ((this.mUIPreparatoryreportingTreeItem2 == null))
                {
                    this.mUIPreparatoryreportingTreeItem2 = new UIPreparatoryreportingTreeItem2(this);
                }
                return this.mUIPreparatoryreportingTreeItem2;
            }
        }
        #endregion
        
        #region Fields
        private UIPreparatoryreportingTreeItem mUIPreparatoryreportingTreeItem;
        
        private UIPreparatoryreportingTreeItem1 mUIPreparatoryreportingTreeItem1;
        
        private UIPreparatoryreportingTreeItem2 mUIPreparatoryreportingTreeItem2;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIPreparatoryreportingTreeItem : WinTreeItem
    {
        
        public UIPreparatoryreportingTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTreeItem.PropertyNames.Name] = "Preparatory reporting Groups Quarterly";
            this.SearchProperties["Value"] = "0";
            this.WindowTitles.Add("Tools for Undertakings");
            #endregion
        }
        
        #region Properties
        public UIS010101ContentofthesTreeItem UIS010101ContentofthesTreeItem
        {
            get
            {
                if ((this.mUIS010101ContentofthesTreeItem == null))
                {
                    this.mUIS010101ContentofthesTreeItem = new UIS010101ContentofthesTreeItem(this);
                }
                return this.mUIS010101ContentofthesTreeItem;
            }
        }
        
        public UIS010201BasicinformatTreeItem UIS010201BasicinformatTreeItem
        {
            get
            {
                if ((this.mUIS010201BasicinformatTreeItem == null))
                {
                    this.mUIS010201BasicinformatTreeItem = new UIS010201BasicinformatTreeItem(this);
                }
                return this.mUIS010201BasicinformatTreeItem;
            }
        }
        
        public UIS020103BalancesheetTreeItem UIS020103BalancesheetTreeItem
        {
            get
            {
                if ((this.mUIS020103BalancesheetTreeItem == null))
                {
                    this.mUIS020103BalancesheetTreeItem = new UIS020103BalancesheetTreeItem(this);
                }
                return this.mUIS020103BalancesheetTreeItem;
            }
        }
        
        public UIS020201AssetsandliabTreeItem UIS020201AssetsandliabTreeItem
        {
            get
            {
                if ((this.mUIS020201AssetsandliabTreeItem == null))
                {
                    this.mUIS020201AssetsandliabTreeItem = new UIS020201AssetsandliabTreeItem(this);
                }
                return this.mUIS020201AssetsandliabTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UIS010101ContentofthesTreeItem mUIS010101ContentofthesTreeItem;
        
        private UIS010201BasicinformatTreeItem mUIS010201BasicinformatTreeItem;
        
        private UIS020103BalancesheetTreeItem mUIS020103BalancesheetTreeItem;
        
        private UIS020201AssetsandliabTreeItem mUIS020201AssetsandliabTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIS010101ContentofthesTreeItem : WinTreeItem
    {
        
        public UIS010101ContentofthesTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTreeItem.PropertyNames.Name] = "S.01.01.01 Content of the submission";
            this.SearchProperties["Value"] = "1";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.NextSibling);
            this.WindowTitles.Add("Tools for Undertakings");
            #endregion
        }
        
        #region Properties
        public WinTreeItem UIContentofthesubmissiTreeItem
        {
            get
            {
                if ((this.mUIContentofthesubmissiTreeItem == null))
                {
                    this.mUIContentofthesubmissiTreeItem = new WinTreeItem(this);
                    #region Search Criteria
                    this.mUIContentofthesubmissiTreeItem.SearchProperties[WinTreeItem.PropertyNames.Name] = "Content of the submission";
                    this.mUIContentofthesubmissiTreeItem.SearchProperties["Value"] = "2";
                    this.mUIContentofthesubmissiTreeItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIContentofthesubmissiTreeItem.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIContentofthesubmissiTreeItem.WindowTitles.Add("Tools for Undertakings");
                    #endregion
                }
                return this.mUIContentofthesubmissiTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private WinTreeItem mUIContentofthesubmissiTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIS010201BasicinformatTreeItem : WinTreeItem
    {
        
        public UIS010201BasicinformatTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTreeItem.PropertyNames.Name] = "S.01.02.01 Basic information";
            this.SearchProperties["Value"] = "1";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.NextSibling);
            this.WindowTitles.Add("Tools for Undertakings");
            #endregion
        }
        
        #region Properties
        public WinTreeItem UIBasicinformationTreeItem
        {
            get
            {
                if ((this.mUIBasicinformationTreeItem == null))
                {
                    this.mUIBasicinformationTreeItem = new WinTreeItem(this);
                    #region Search Criteria
                    this.mUIBasicinformationTreeItem.SearchProperties[WinTreeItem.PropertyNames.Name] = "Basic information";
                    this.mUIBasicinformationTreeItem.SearchProperties["Value"] = "2";
                    this.mUIBasicinformationTreeItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIBasicinformationTreeItem.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIBasicinformationTreeItem.WindowTitles.Add("Tools for Undertakings");
                    #endregion
                }
                return this.mUIBasicinformationTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private WinTreeItem mUIBasicinformationTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIS020103BalancesheetTreeItem : WinTreeItem
    {
        
        public UIS020103BalancesheetTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTreeItem.PropertyNames.Name] = "S.02.01.06 Balance sheet";
            this.SearchProperties["Value"] = "1";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.NextSibling);
            this.WindowTitles.Add("Tools for Undertakings");
            #endregion
        }
        
        #region Properties
        public WinTreeItem UIBalancesheetTreeItem
        {
            get
            {
                if ((this.mUIBalancesheetTreeItem == null))
                {
                    this.mUIBalancesheetTreeItem = new WinTreeItem(this);
                    #region Search Criteria
                    this.mUIBalancesheetTreeItem.SearchProperties[WinTreeItem.PropertyNames.Name] = "Balance sheet";
                    this.mUIBalancesheetTreeItem.SearchProperties["Value"] = "2";
                    this.mUIBalancesheetTreeItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIBalancesheetTreeItem.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIBalancesheetTreeItem.WindowTitles.Add("Tools for Undertakings");
                    #endregion
                }
                return this.mUIBalancesheetTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private WinTreeItem mUIBalancesheetTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIS020201AssetsandliabTreeItem : WinTreeItem
    {
        
        public UIS020201AssetsandliabTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTreeItem.PropertyNames.Name] = "S.02.02.01 Assets and liabilities by currency";
            this.SearchProperties["Value"] = "1";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.NextSibling);
            this.WindowTitles.Add("Tools for Undertakings");
            #endregion
        }
        
        #region Properties
        public WinTreeItem UIPart01TreeItem
        {
            get
            {
                if ((this.mUIPart01TreeItem == null))
                {
                    this.mUIPart01TreeItem = new WinTreeItem(this);
                    #region Search Criteria
                    this.mUIPart01TreeItem.SearchProperties[WinTreeItem.PropertyNames.Name] = "Part 01";
                    this.mUIPart01TreeItem.SearchProperties["Value"] = "2";
                    this.mUIPart01TreeItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIPart01TreeItem.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIPart01TreeItem.WindowTitles.Add("Tools for Undertakings ");
                    #endregion
                }
                return this.mUIPart01TreeItem;
            }
        }
        #endregion
        
        #region Fields
        private WinTreeItem mUIPart01TreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIPreparatoryreportingTreeItem1 : WinTreeItem
    {
        
        public UIPreparatoryreportingTreeItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTreeItem.PropertyNames.Name] = "Preparatory reporting Groups Quarterly";
            this.SearchProperties["Value"] = "0";
            this.WindowTitles.Add("Tools for Undertakings ");
            #endregion
        }
        
        #region Properties
        public UIS010202BasicinformatTreeItem UIS010202BasicinformatTreeItem
        {
            get
            {
                if ((this.mUIS010202BasicinformatTreeItem == null))
                {
                    this.mUIS010202BasicinformatTreeItem = new UIS010202BasicinformatTreeItem(this);
                }
                return this.mUIS010202BasicinformatTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UIS010202BasicinformatTreeItem mUIS010202BasicinformatTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIS010202BasicinformatTreeItem : WinTreeItem
    {
        
        public UIS010202BasicinformatTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTreeItem.PropertyNames.Name] = "S.01.02.02 Basic information";
            this.SearchProperties["Value"] = "1";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.NextSibling);
            this.WindowTitles.Add("Tools for Undertakings ");
            #endregion
        }
        
        #region Properties
        public WinTreeItem UIBasicinformationTreeItem
        {
            get
            {
                if ((this.mUIBasicinformationTreeItem == null))
                {
                    this.mUIBasicinformationTreeItem = new WinTreeItem(this);
                    #region Search Criteria
                    this.mUIBasicinformationTreeItem.SearchProperties[WinTreeItem.PropertyNames.Name] = "Basic information";
                    this.mUIBasicinformationTreeItem.SearchProperties["Value"] = "2";
                    this.mUIBasicinformationTreeItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIBasicinformationTreeItem.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIBasicinformationTreeItem.WindowTitles.Add("Tools for Undertakings ");
                    #endregion
                }
                return this.mUIBasicinformationTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private WinTreeItem mUIBasicinformationTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIPreparatoryreportingTreeItem2 : WinTreeItem
    {
        
        public UIPreparatoryreportingTreeItem2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTreeItem.PropertyNames.Name] = "Preparatory reporting Groups Quarterly";
            this.SearchProperties["Value"] = "0";
            this.WindowTitles.Add("Tools for Undertakings ");
            #endregion
        }
        
        #region Properties
        public UIS020106BalancesheetTreeItem UIS020106BalancesheetTreeItem
        {
            get
            {
                if ((this.mUIS020106BalancesheetTreeItem == null))
                {
                    this.mUIS020106BalancesheetTreeItem = new UIS020106BalancesheetTreeItem(this);
                }
                return this.mUIS020106BalancesheetTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UIS020106BalancesheetTreeItem mUIS020106BalancesheetTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIS020106BalancesheetTreeItem : WinTreeItem
    {
        
        public UIS020106BalancesheetTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTreeItem.PropertyNames.Name] = "S.02.01.06 Balance sheet";
            this.SearchProperties["Value"] = "1";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.SearchConfigurations.Add(SearchConfiguration.NextSibling);
            this.WindowTitles.Add("Tools for Undertakings  ");
            #endregion
        }
        
        #region Properties
        public WinTreeItem UIBalancesheetTreeItem
        {
            get
            {
                if ((this.mUIBalancesheetTreeItem == null))
                {
                    this.mUIBalancesheetTreeItem = new WinTreeItem(this);
                    #region Search Criteria
                    this.mUIBalancesheetTreeItem.SearchProperties[WinTreeItem.PropertyNames.Name] = "Balance sheet";
                    this.mUIBalancesheetTreeItem.SearchProperties["Value"] = "2";
                    this.mUIBalancesheetTreeItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIBalancesheetTreeItem.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIBalancesheetTreeItem.WindowTitles.Add("Tools for Undertakings  ");
                    #endregion
                }
                return this.mUIBalancesheetTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private WinTreeItem mUIBalancesheetTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UICreateSolvencyIImultWindow : WinWindow
    {
        
        public UICreateSolvencyIImultWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Create Solvency II multi report container";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Create Solvency II multi report container");
            #endregion
        }
        
        #region Properties
        public UIDetailsPanePane UIDetailsPanePane
        {
            get
            {
                if ((this.mUIDetailsPanePane == null))
                {
                    this.mUIDetailsPanePane = new UIDetailsPanePane(this);
                }
                return this.mUIDetailsPanePane;
            }
        }
        
        public UISaveWindow UISaveWindow
        {
            get
            {
                if ((this.mUISaveWindow == null))
                {
                    this.mUISaveWindow = new UISaveWindow(this);
                }
                return this.mUISaveWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIDetailsPanePane mUIDetailsPanePane;
        
        private UISaveWindow mUISaveWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIDetailsPanePane : WinPane
    {
        
        public UIDetailsPanePane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Details Pane";
            this.WindowTitles.Add("Create Solvency II multi report container");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIFilenameComboBox
        {
            get
            {
                if ((this.mUIFilenameComboBox == null))
                {
                    this.mUIFilenameComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIFilenameComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "File name:";
                    this.mUIFilenameComboBox.WindowTitles.Add("Create Solvency II multi report container");
                    #endregion
                }
                return this.mUIFilenameComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIFilenameComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UISaveWindow : WinWindow
    {
        
        public UISaveWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Create Solvency II multi report container");
            #endregion
        }
        
        #region Properties
        public WinButton UISaveButton
        {
            get
            {
                if ((this.mUISaveButton == null))
                {
                    this.mUISaveButton = new WinButton(this);
                    #region Search Criteria
                    this.mUISaveButton.SearchProperties[WinButton.PropertyNames.Name] = "Save";
                    this.mUISaveButton.WindowTitles.Add("Create Solvency II multi report container");
                    #endregion
                }
                return this.mUISaveButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUISaveButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIAddanewreportWindow : WinWindow
    {
        
        public UIAddanewreportWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Add a new report";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Add a new report");
            #endregion
        }
        
        #region Properties
        public UITxtReportNameWindow UITxtReportNameWindow
        {
            get
            {
                if ((this.mUITxtReportNameWindow == null))
                {
                    this.mUITxtReportNameWindow = new UITxtReportNameWindow(this);
                }
                return this.mUITxtReportNameWindow;
            }
        }
        
        public UICboModelWindow UICboModelWindow
        {
            get
            {
                if ((this.mUICboModelWindow == null))
                {
                    this.mUICboModelWindow = new UICboModelWindow(this);
                }
                return this.mUICboModelWindow;
            }
        }
        
        public UIDtPeriodWindow UIDtPeriodWindow
        {
            get
            {
                if ((this.mUIDtPeriodWindow == null))
                {
                    this.mUIDtPeriodWindow = new UIDtPeriodWindow(this);
                }
                return this.mUIDtPeriodWindow;
            }
        }
        
        public UITxtEntityIDWindow UITxtEntityIDWindow
        {
            get
            {
                if ((this.mUITxtEntityIDWindow == null))
                {
                    this.mUITxtEntityIDWindow = new UITxtEntityIDWindow(this);
                }
                return this.mUITxtEntityIDWindow;
            }
        }
        
        public UITxtNameWindow UITxtNameWindow
        {
            get
            {
                if ((this.mUITxtNameWindow == null))
                {
                    this.mUITxtNameWindow = new UITxtNameWindow(this);
                }
                return this.mUITxtNameWindow;
            }
        }
        
        public UICreateanewreportWindow UICreateanewreportWindow
        {
            get
            {
                if ((this.mUICreateanewreportWindow == null))
                {
                    this.mUICreateanewreportWindow = new UICreateanewreportWindow(this);
                }
                return this.mUICreateanewreportWindow;
            }
        }
        #endregion
        
        #region Fields
        private UITxtReportNameWindow mUITxtReportNameWindow;
        
        private UICboModelWindow mUICboModelWindow;
        
        private UIDtPeriodWindow mUIDtPeriodWindow;
        
        private UITxtEntityIDWindow mUITxtEntityIDWindow;
        
        private UITxtNameWindow mUITxtNameWindow;
        
        private UICreateanewreportWindow mUICreateanewreportWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UITxtReportNameWindow : WinWindow
    {
        
        public UITxtReportNameWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "txtReportName";
            this.WindowTitles.Add("Add a new report");
            #endregion
        }
        
        #region Properties
        public WinEdit UITxtReportNameEdit
        {
            get
            {
                if ((this.mUITxtReportNameEdit == null))
                {
                    this.mUITxtReportNameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITxtReportNameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Entity identifier";
                    this.mUITxtReportNameEdit.WindowTitles.Add("Add a new report");
                    #endregion
                }
                return this.mUITxtReportNameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITxtReportNameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UICboModelWindow : WinWindow
    {
        
        public UICboModelWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "cboModel";
            this.WindowTitles.Add("Add a new report");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIDateComboBox
        {
            get
            {
                if ((this.mUIDateComboBox == null))
                {
                    this.mUIDateComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIDateComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "Date";
                    this.mUIDateComboBox.WindowTitles.Add("Add a new report");
                    #endregion
                }
                return this.mUIDateComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIDateComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIDtPeriodWindow : WinWindow
    {
        
        public UIDtPeriodWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "dtPeriod";
            this.WindowTitles.Add("Add a new report");
            #endregion
        }
        
        #region Properties
        public WinDateTimePicker UIDtPeriodDateTimePicker
        {
            get
            {
                if ((this.mUIDtPeriodDateTimePicker == null))
                {
                    this.mUIDtPeriodDateTimePicker = new WinDateTimePicker(this);
                    #region Search Criteria
                    this.mUIDtPeriodDateTimePicker.WindowTitles.Add("Add a new report");
                    #endregion
                }
                return this.mUIDtPeriodDateTimePicker;
            }
        }
        #endregion
        
        #region Fields
        private WinDateTimePicker mUIDtPeriodDateTimePicker;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UITxtEntityIDWindow : WinWindow
    {
        
        public UITxtEntityIDWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "txtEntityID";
            this.WindowTitles.Add("Add a new report");
            #endregion
        }
        
        #region Properties
        public WinEdit UITxtEntityIDEdit
        {
            get
            {
                if ((this.mUITxtEntityIDEdit == null))
                {
                    this.mUITxtEntityIDEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITxtEntityIDEdit.WindowTitles.Add("Add a new report");
                    #endregion
                }
                return this.mUITxtEntityIDEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITxtEntityIDEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UITxtNameWindow : WinWindow
    {
        
        public UITxtNameWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "txtName";
            this.WindowTitles.Add("Add a new report");
            #endregion
        }
        
        #region Properties
        public WinEdit UITxtNameEdit
        {
            get
            {
                if ((this.mUITxtNameEdit == null))
                {
                    this.mUITxtNameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITxtNameEdit.WindowTitles.Add("Add a new report");
                    #endregion
                }
                return this.mUITxtNameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITxtNameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UICreateanewreportWindow : WinWindow
    {
        
        public UICreateanewreportWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnInsert";
            this.WindowTitles.Add("Add a new report");
            #endregion
        }
        
        #region Properties
        public WinButton UICreateanewreportButton
        {
            get
            {
                if ((this.mUICreateanewreportButton == null))
                {
                    this.mUICreateanewreportButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICreateanewreportButton.SearchProperties[WinButton.PropertyNames.Name] = "Create a new report";
                    this.mUICreateanewreportButton.WindowTitles.Add("Add a new report");
                    #endregion
                }
                return this.mUICreateanewreportButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICreateanewreportButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIConfirmSaveAsWindow : WinWindow
    {
        
        public UIConfirmSaveAsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Confirm Save As";
            //this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Confirm Save As");
            #endregion
        }
        
        #region Properties
        public UIConfirmSaveAsPane UIConfirmSaveAsPane
        {
            get
            {
                if ((this.mUIConfirmSaveAsPane == null))
                {
                    this.mUIConfirmSaveAsPane = new UIConfirmSaveAsPane(this);
                }
                return this.mUIConfirmSaveAsPane;
            }
        }
        #endregion
        
        #region Fields
        private UIConfirmSaveAsPane mUIConfirmSaveAsPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIConfirmSaveAsPane : WinPane
    {
        
        public UIConfirmSaveAsPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Confirm Save As";
            this.WindowTitles.Add("Confirm Save As");
            #endregion
        }
        
        #region Properties
        public WinButton UIYesButton
        {
            get
            {
                if ((this.mUIYesButton == null))
                {
                    this.mUIYesButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIYesButton.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mUIYesButton.WindowTitles.Add("Confirm Save As");
                    #endregion
                }
                return this.mUIYesButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIYesButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UILocateXBRLfiletoimpoWindow : WinWindow
    {
        
        public UILocateXBRLfiletoimpoWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Locate XBRL file to import";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Locate XBRL file to import");
            #endregion
        }
        
        #region Properties
        public UIItemWindow2 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow2(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIOpenWindow UIOpenWindow
        {
            get
            {
                if ((this.mUIOpenWindow == null))
                {
                    this.mUIOpenWindow = new UIOpenWindow(this);
                }
                return this.mUIOpenWindow;
            }
        }
        
        public UIItemWindow11 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow11(this);
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UIItemWindow111 UIItemWindow11
        {
            get
            {
                if ((this.mUIItemWindow11 == null))
                {
                    this.mUIItemWindow11 = new UIItemWindow111(this);
                }
                return this.mUIItemWindow11;
            }
        }
        
        public UIItemWindow21 UIItemWindow2
        {
            get
            {
                if ((this.mUIItemWindow2 == null))
                {
                    this.mUIItemWindow2 = new UIItemWindow21(this);
                }
                return this.mUIItemWindow2;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow2 mUIItemWindow;
        
        private UIOpenWindow mUIOpenWindow;
        
        private UIItemWindow11 mUIItemWindow1;
        
        private UIItemWindow111 mUIItemWindow11;
        
        private UIItemWindow21 mUIItemWindow2;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIItemWindow2 : WinWindow
    {
        
        public UIItemWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Locate XBRL file to import");
            #endregion
        }
        
        #region Properties
        public UIQrgxbrlListItem UIQrgxbrlListItem
        {
            get
            {
                if ((this.mUIQrgxbrlListItem == null))
                {
                    this.mUIQrgxbrlListItem = new UIQrgxbrlListItem(this);
                }
                return this.mUIQrgxbrlListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIQrgxbrlListItem mUIQrgxbrlListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIQrgxbrlListItem : WinListItem
    {
        
        public UIQrgxbrlListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "qrg.xbrl";
            this.WindowTitles.Add("Locate XBRL file to import");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Locate XBRL file to import");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIOpenWindow : WinWindow
    {
        
        public UIOpenWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Locate XBRL file to import");
            #endregion
        }
        
        #region Properties
        public WinButton UIOpenButton
        {
            get
            {
                if ((this.mUIOpenButton == null))
                {
                    this.mUIOpenButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOpenButton.SearchProperties[WinButton.PropertyNames.Name] = "Open";
                    this.mUIOpenButton.WindowTitles.Add("Locate XBRL file to import");
                    #endregion
                }
                return this.mUIOpenButton;
            }
        }
        
        public WinSplitButton UIOpenSplitButton
        {
            get
            {
                if ((this.mUIOpenSplitButton == null))
                {
                    this.mUIOpenSplitButton = new WinSplitButton(this);
                    #region Search Criteria
                    this.mUIOpenSplitButton.SearchProperties[WinButton.PropertyNames.Name] = "Open";
                    this.mUIOpenSplitButton.WindowTitles.Add("Locate XBRL file to import");
                    #endregion
                }
                return this.mUIOpenSplitButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOpenButton;
        
        private WinSplitButton mUIOpenSplitButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIItemWindow11 : WinWindow
    {
        
        public UIItemWindow11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1148";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Locate XBRL file to import");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIFilenameComboBox
        {
            get
            {
                if ((this.mUIFilenameComboBox == null))
                {
                    this.mUIFilenameComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIFilenameComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "File name:";
                    this.mUIFilenameComboBox.WindowTitles.Add("Locate XBRL file to import");
                    #endregion
                }
                return this.mUIFilenameComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIFilenameComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIItemWindow111 : WinWindow
    {
        
        public UIItemWindow111(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1148";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "3";
            this.WindowTitles.Add("Locate XBRL file to import");
            #endregion
        }
        
        #region Properties
        public WinEdit UIFilenameEdit
        {
            get
            {
                if ((this.mUIFilenameEdit == null))
                {
                    this.mUIFilenameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIFilenameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "File name:";
                    this.mUIFilenameEdit.WindowTitles.Add("Locate XBRL file to import");
                    #endregion
                }
                return this.mUIFilenameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIFilenameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIItemWindow21 : WinWindow
    {
        
        public UIItemWindow21(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1148";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Locate XBRL file to import");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIFilenameComboBox
        {
            get
            {
                if ((this.mUIFilenameComboBox == null))
                {
                    this.mUIFilenameComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIFilenameComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "File name:";
                    this.mUIFilenameComboBox.WindowTitles.Add("Locate XBRL file to import");
                    #endregion
                }
                return this.mUIFilenameComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIFilenameComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UINameofinstanceWindow : WinWindow
    {
        
        public UINameofinstanceWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Name of instance";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Name of instance");
            #endregion
        }
        
        #region Properties
        public UIItemWindow3 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow3(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIOKWindow1 UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow1(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow3 mUIItemWindow;
        
        private UIOKWindow1 mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIItemWindow3 : WinWindow
    {
        
        public UIItemWindow3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.EDIT", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Name of instance");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("Name of instance");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIOKWindow1 : WinWindow
    {
        
        public UIOKWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "okButton";
            this.WindowTitles.Add("Name of instance");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Name of instance");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIArelleresultsparsingWindow : WinWindow
    {
        
        public UIArelleresultsparsingWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Arelle results parsing XBRL instance into database";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Arelle results parsing XBRL instance into database");
            #endregion
        }
        
        #region Properties
        public WinTitleBar UIArelleresultsparsingTitleBar
        {
            get
            {
                if ((this.mUIArelleresultsparsingTitleBar == null))
                {
                    this.mUIArelleresultsparsingTitleBar = new WinTitleBar(this);
                    #region Search Criteria
                    this.mUIArelleresultsparsingTitleBar.WindowTitles.Add("Arelle results parsing XBRL instance into database");
                    #endregion
                }
                return this.mUIArelleresultsparsingTitleBar;
            }
        }
        
        public UIOKWindow2 UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow2(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private WinTitleBar mUIArelleresultsparsingTitleBar;
        
        private UIOKWindow2 mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIOKWindow2 : WinWindow
    {
        
        public UIOKWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Arelle results parsing XBRL instance into database");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Arelle results parsing XBRL instance into database");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIToolsforUndertakingsWindow : WinWindow
    {
        
        public UIToolsforUndertakingsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Tools for Undertakings";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Tools for Undertakings");
            #endregion
        }
        
        #region Properties
        public UIMenuStrip1MenuBar2 UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new UIMenuStrip1MenuBar2(this);
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        #endregion
        
        #region Fields
        private UIMenuStrip1MenuBar2 mUIMenuStrip1MenuBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIMenuStrip1MenuBar2 : WinMenuBar
    {
        
        public UIMenuStrip1MenuBar2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("Tools for Undertakings");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIValidationMenuItem
        {
            get
            {
                if ((this.mUIValidationMenuItem == null))
                {
                    this.mUIValidationMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIValidationMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Validation";
                    this.mUIValidationMenuItem.WindowTitles.Add("Tools for Undertakings");
                    #endregion
                }
                return this.mUIValidationMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIValidationMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIToolsforUndertakingsWindow1 : WinWindow
    {
        
        public UIToolsforUndertakingsWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Tools for Undertakings";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Tools for Undertakings");
            #endregion
        }
        
        #region Properties
        public UIMenuStrip1MenuBar3 UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new UIMenuStrip1MenuBar3(this);
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        #endregion
        
        #region Fields
        private UIMenuStrip1MenuBar3 mUIMenuStrip1MenuBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIMenuStrip1MenuBar3 : WinMenuBar
    {
        
        public UIMenuStrip1MenuBar3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("Tools for Undertakings");
            #endregion
        }
        
        #region Properties
        public UIValidationMenuItem1 UIValidationMenuItem1
        {
            get
            {
                if ((this.mUIValidationMenuItem1 == null))
                {
                    this.mUIValidationMenuItem1 = new UIValidationMenuItem1(this);
                }
                return this.mUIValidationMenuItem1;
            }
        }
        #endregion
        
        #region Fields
        private UIValidationMenuItem1 mUIValidationMenuItem1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIValidationMenuItem1 : WinMenuItem
    {
        
        public UIValidationMenuItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "Validation";
            this.WindowTitles.Add("Tools for Undertakings");
            #endregion
        }
        
        #region Properties
        public UITestLevel2MenuItem UITestLevel2MenuItem
        {
            get
            {
                if ((this.mUITestLevel2MenuItem == null))
                {
                    this.mUITestLevel2MenuItem = new UITestLevel2MenuItem(this);
                }
                return this.mUITestLevel2MenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UITestLevel2MenuItem mUITestLevel2MenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UITestLevel2MenuItem : WinMenuItem
    {
        
        public UITestLevel2MenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "Test Level2";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("Tools for Undertakings");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UISubMenu2MenuItem
        {
            get
            {
                if ((this.mUISubMenu2MenuItem == null))
                {
                    this.mUISubMenu2MenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUISubMenu2MenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Sub Menu2";
                    this.mUISubMenu2MenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUISubMenu2MenuItem.WindowTitles.Add("Tools for Undertakings");
                    #endregion
                }
                return this.mUISubMenu2MenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUISubMenu2MenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIItemWindow4 : WinWindow
    {
        
        public UIItemWindow4()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Export XBRL instance fileDropDown";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public WinMenu UIExportXBRLinstancefiMenu
        {
            get
            {
                if ((this.mUIExportXBRLinstancefiMenu == null))
                {
                    this.mUIExportXBRLinstancefiMenu = new WinMenu(this);
                    #region Search Criteria
                    this.mUIExportXBRLinstancefiMenu.SearchProperties[WinMenu.PropertyNames.Name] = "Export XBRL instance fileDropDown";
                    #endregion
                }
                return this.mUIExportXBRLinstancefiMenu;
            }
        }
        #endregion
        
        #region Fields
        private WinMenu mUIExportXBRLinstancefiMenu;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UICreateanewmultireporWindow : WinWindow
    {
        
        public UICreateanewmultireporWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Create a new multi report container";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Create a new multi report container");
            #endregion
        }
        
        #region Properties
        public UIDetailsPanePane1 UIDetailsPanePane
        {
            get
            {
                if ((this.mUIDetailsPanePane == null))
                {
                    this.mUIDetailsPanePane = new UIDetailsPanePane1(this);
                }
                return this.mUIDetailsPanePane;
            }
        }
        
        public UISaveWindow1 UISaveWindow
        {
            get
            {
                if ((this.mUISaveWindow == null))
                {
                    this.mUISaveWindow = new UISaveWindow1(this);
                }
                return this.mUISaveWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIDetailsPanePane1 mUIDetailsPanePane;
        
        private UISaveWindow1 mUISaveWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIDetailsPanePane1 : WinPane
    {
        
        public UIDetailsPanePane1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Details Pane";
            this.WindowTitles.Add("Create a new multi report container");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIFilenameComboBox
        {
            get
            {
                if ((this.mUIFilenameComboBox == null))
                {
                    this.mUIFilenameComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIFilenameComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "File name:";
                    this.mUIFilenameComboBox.WindowTitles.Add("Create a new multi report container");
                    #endregion
                }
                return this.mUIFilenameComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIFilenameComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UISaveWindow1 : WinWindow
    {
        
        public UISaveWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Create a new multi report container");
            #endregion
        }
        
        #region Properties
        public WinButton UISaveButton
        {
            get
            {
                if ((this.mUISaveButton == null))
                {
                    this.mUISaveButton = new WinButton(this);
                    #region Search Criteria
                    this.mUISaveButton.SearchProperties[WinButton.PropertyNames.Name] = "Save";
                    this.mUISaveButton.WindowTitles.Add("Create a new multi report container");
                    #endregion
                }
                return this.mUISaveButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUISaveButton;
        #endregion
    }
}
